import {
  color,
  hexToHsva,
  hsvaToHex,
  validHex
} from "./chunk-7DUP4DSB.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  require_jsx_runtime
} from "./chunk-7VLPLYP4.js";
import {
  __toESM,
  require_react
} from "./chunk-6FBSFQRG.js";

// node_modules/@uiw/react-color-wheel/esm/index.js
var import_react4 = __toESM(require_react());

// node_modules/@uiw/react-drag-event-interactive/esm/index.js
var import_react2 = __toESM(require_react());

// node_modules/@uiw/react-drag-event-interactive/esm/utils.js
var import_react = __toESM(require_react());
function useEventCallback(handler) {
  var callbackRef = (0, import_react.useRef)(handler);
  (0, import_react.useEffect)(() => {
    callbackRef.current = handler;
  });
  return (0, import_react.useCallback)((value, event) => callbackRef.current && callbackRef.current(value, event), []);
}
var isTouch = (event) => "touches" in event;
var preventDefaultMove = (event) => {
  !isTouch(event) && event.preventDefault && event.preventDefault();
};
var clamp = function clamp2(number, min, max) {
  if (min === void 0) {
    min = 0;
  }
  if (max === void 0) {
    max = 1;
  }
  return number > max ? max : number < min ? min : number;
};
var getRelativePosition = (node, event) => {
  var rect = node.getBoundingClientRect();
  var pointer = isTouch(event) ? event.touches[0] : event;
  return {
    left: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),
    top: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height),
    width: rect.width,
    height: rect.height,
    x: pointer.pageX - (rect.left + window.pageXOffset),
    y: pointer.pageY - (rect.top + window.pageYOffset)
  };
};

// node_modules/@uiw/react-drag-event-interactive/esm/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["prefixCls", "className", "onMove", "onDown"];
var Interactive = import_react2.default.forwardRef((props, ref) => {
  var {
    prefixCls = "w-color-interactive",
    className,
    onMove,
    onDown
  } = props, reset = _objectWithoutPropertiesLoose(props, _excluded);
  var container = (0, import_react2.useRef)(null);
  var hasTouched = (0, import_react2.useRef)(false);
  var [isDragging, setDragging] = (0, import_react2.useState)(false);
  var onMoveCallback = useEventCallback(onMove);
  var onKeyCallback = useEventCallback(onDown);
  var isValid = (event) => {
    if (hasTouched.current && !isTouch(event))
      return false;
    hasTouched.current = isTouch(event);
    return true;
  };
  var handleMove = (0, import_react2.useCallback)((event) => {
    preventDefaultMove(event);
    var isDown = isTouch(event) ? event.touches.length > 0 : event.buttons > 0;
    if (isDown && container.current) {
      onMoveCallback && onMoveCallback(getRelativePosition(container.current, event), event);
    } else {
      setDragging(false);
    }
  }, [onMoveCallback]);
  var handleMoveEnd = (0, import_react2.useCallback)(() => setDragging(false), []);
  var toggleDocumentEvents = (0, import_react2.useCallback)((state) => {
    var toggleEvent = state ? window.addEventListener : window.removeEventListener;
    toggleEvent(hasTouched.current ? "touchmove" : "mousemove", handleMove);
    toggleEvent(hasTouched.current ? "touchend" : "mouseup", handleMoveEnd);
  }, []);
  (0, import_react2.useEffect)(() => {
    toggleDocumentEvents(isDragging);
    return () => {
      isDragging && toggleDocumentEvents(false);
    };
  }, [isDragging, toggleDocumentEvents]);
  var handleMoveStart = (0, import_react2.useCallback)((event) => {
    preventDefaultMove(event.nativeEvent);
    if (!isValid(event.nativeEvent))
      return;
    onKeyCallback && onKeyCallback(getRelativePosition(container.current, event.nativeEvent), event.nativeEvent);
    setDragging(true);
  }, [onKeyCallback]);
  return (0, import_jsx_runtime.jsx)("div", _extends({}, reset, {
    className: [prefixCls, className || ""].filter(Boolean).join(" "),
    style: _extends({}, reset.style, {
      touchAction: "none"
    }),
    ref: container,
    tabIndex: 0,
    onMouseDown: handleMoveStart,
    onTouchStart: handleMoveStart
  }));
});
Interactive.displayName = "Interactive";
var esm_default = Interactive;

// node_modules/@uiw/react-color-wheel/esm/Pointer.js
var import_react3 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var BOXSHADOW = "rgb(255 255 255) 0px 0px 0px 1.5px, rgb(0 0 0 / 30%) 0px 0px 1px 1px inset, rgb(0 0 0 / 40%) 0px 0px 1px 2px";
var Pointer = (_ref) => {
  var {
    className,
    color: color2,
    left,
    top,
    style,
    prefixCls
  } = _ref;
  var styleWarp = _extends({}, style, {
    position: "absolute",
    top,
    left
  });
  var cls = prefixCls + "-pointer " + (className || "");
  return (0, import_jsx_runtime2.jsx)("div", {
    className: cls,
    style: styleWarp,
    children: (0, import_jsx_runtime2.jsx)("div", {
      className: prefixCls + "-fill",
      style: {
        width: 10,
        height: 10,
        transform: "translate(-5px, -5px)",
        boxShadow: BOXSHADOW,
        borderRadius: "50%",
        backgroundColor: "#fff"
      },
      children: (0, import_jsx_runtime2.jsx)("div", {
        style: {
          inset: 0,
          borderRadius: "50%",
          position: "absolute",
          backgroundColor: color2
        }
      })
    })
  });
};

// node_modules/@uiw/react-color-wheel/esm/utils.js
var TAU = Math.PI * 2;
var mod = (a, n) => (a % n + n) % n;
var dist = (x, y) => Math.sqrt(x * x + y * y);
function getWheelDimensions(_ref) {
  var {
    width = 0
  } = _ref;
  var r = width / 2;
  return {
    width,
    radius: r,
    cx: r,
    cy: r
  };
}
function getWheelHandlePosition(props, hsv) {
  var {
    cx,
    cy
  } = getWheelDimensions(props);
  var handleRange = getHandleRange(props);
  var handleAngle = (180 + translateWheelAngle(props, hsv.h, true)) * (TAU / 360);
  var handleDist = hsv.s / 100 * handleRange;
  var direction = props.direction === "clockwise" ? -1 : 1;
  return {
    x: cx + handleDist * Math.cos(handleAngle) * direction,
    y: cy + handleDist * Math.sin(handleAngle) * direction
  };
}
function getHandleRange(_ref2) {
  var {
    width = 0
  } = _ref2;
  return width / 2;
}
function translateWheelAngle(props, angle, invert) {
  var wheelAngle = props.angle || 0;
  var direction = props.direction;
  if (invert && direction === "clockwise")
    angle = wheelAngle + angle;
  else if (direction === "clockwise")
    angle = 360 - wheelAngle + angle;
  else if (invert && direction === "anticlockwise")
    angle = wheelAngle + 180 - angle;
  else if (direction === "anticlockwise")
    angle = wheelAngle - angle;
  return mod(angle, 360);
}
function getWheelValueFromInput(props, x, y) {
  var {
    cx,
    cy
  } = getWheelDimensions(props);
  var handleRange = getHandleRange(props);
  x = cx - x;
  y = cy - y;
  var hue = translateWheelAngle(props, Math.atan2(-y, -x) * (360 / TAU));
  var handleDist = Math.min(dist(x, y), handleRange);
  return {
    h: Math.round(hue),
    s: Math.round(100 / handleRange * handleDist)
  };
}

// node_modules/@uiw/react-color-wheel/esm/index.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded2 = ["prefixCls", "radius", "pointer", "className", "style", "width", "height", "direction", "angle", "color", "onChange"];
var HUE_GRADIENT_CLOCKWISE = "conic-gradient(red, yellow, lime, aqua, blue, magenta, red)";
var HUE_GRADIENT_ANTICLOCKWISE = "conic-gradient(red, magenta, blue, aqua, lime, yellow, red)";
var Wheel = import_react4.default.forwardRef((props, ref) => {
  var {
    prefixCls = "w-color-wheel",
    radius = 0,
    pointer,
    className,
    style,
    width = 200,
    height = 200,
    direction = "anticlockwise",
    angle = 180,
    color: color2,
    onChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  var hsva = typeof color2 === "string" && validHex(color2) ? hexToHsva(color2) : color2 || {};
  var hex = color2 ? hsvaToHex(hsva) : "";
  var positions = getWheelHandlePosition({
    width
  }, hsva);
  var comProps = {
    top: "0",
    left: "0",
    color: hex
  };
  var handleChange = (interaction, event) => {
    var result = getWheelValueFromInput({
      width
    }, width - interaction.x, height - interaction.y);
    var handleHsva = {
      h: result.h,
      s: result.s,
      v: hsva.v,
      a: hsva.a
    };
    onChange && onChange(color(handleHsva));
  };
  var pointerStyle = {
    zIndex: 1,
    transform: "translate(" + positions.x + "px, " + positions.y + "px)"
  };
  var pointerElement = pointer && typeof pointer === "function" ? pointer(_extends({
    prefixCls,
    style: pointerStyle
  }, comProps)) : (0, import_jsx_runtime3.jsx)(Pointer, _extends({
    prefixCls,
    style: pointerStyle
  }, comProps));
  return (0, import_jsx_runtime4.jsxs)(esm_default, _extends({
    className: [prefixCls, className || ""].filter(Boolean).join(" ")
  }, other, {
    style: _extends({
      position: "relative",
      width,
      height
    }, style),
    ref,
    onMove: handleChange,
    onDown: handleChange,
    children: [pointerElement, (0, import_jsx_runtime3.jsx)("div", {
      style: {
        position: "absolute",
        borderRadius: "50%",
        background: direction === "anticlockwise" ? HUE_GRADIENT_CLOCKWISE : HUE_GRADIENT_ANTICLOCKWISE,
        transform: "rotateZ(" + (angle + 90) + "deg)",
        inset: 0
      }
    }), (0, import_jsx_runtime3.jsx)("div", {
      style: {
        position: "absolute",
        borderRadius: "50%",
        background: "radial-gradient(circle closest-side, #fff, transparent)",
        inset: 0
      }
    }), (0, import_jsx_runtime3.jsx)("div", {
      style: {
        backgroundColor: "#000",
        borderRadius: "50%",
        position: "absolute",
        inset: 0,
        opacity: typeof hsva.v === "number" ? 1 - hsva.v / 100 : 0
      }
    })]
  }));
});
Wheel.displayName = "Wheel";
var esm_default2 = Wheel;
export {
  esm_default2 as default
};
//# sourceMappingURL=@uiw_react-color-wheel.js.map
